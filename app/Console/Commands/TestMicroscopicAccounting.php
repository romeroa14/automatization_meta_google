<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\MicroscopicAccountingService;
use App\Models\ActiveCampaign;

class TestMicroscopicAccounting extends Command
{
    protected $signature = 'test:microscopic-accounting';
    protected $description = 'Probar el sistema de contabilidad microsc√≥pica basado en estados de campa√±as';

    public function handle()
    {
        $this->info('üî¨ Iniciando prueba de contabilidad microsc√≥pica...');
        
        // Primero, mostrar el estado actual de las campa√±as
        $this->showCurrentCampaignStatuses();
        
        $this->line('');
        $this->info('üöÄ Ejecutando procesamiento microsc√≥pico...');
        
        // Ejecutar el servicio de contabilidad microsc√≥pica
        $microscopicService = new MicroscopicAccountingService();
        $results = $microscopicService->processCampaignsByStatus();
        
        // Mostrar resultados
        $this->displayResults($results);
        
        $this->info('üéâ Prueba de contabilidad microsc√≥pica completada!');
    }
    
    private function showCurrentCampaignStatuses()
    {
        $this->info('üìä Estado actual de las campa√±as:');
        
        $campaigns = ActiveCampaign::all();
        
        if ($campaigns->isEmpty()) {
            $this->warn('No se encontraron campa√±as activas.');
            return;
        }
        
        $this->table(
            ['Campa√±a', 'Estado Meta', 'Estado Real', 'Presupuesto Diario', 'Gastado', 'Duraci√≥n'],
            $campaigns->map(function ($campaign) {
                $realStatus = $campaign->getRealCampaignStatus();
                $dailyBudget = $campaign->convertMetaNumber($campaign->campaign_daily_budget ?? $campaign->adset_daily_budget ?? 0, 'budget');
                $actualSpent = $campaign->convertMetaNumber($campaign->getAmountSpentFromMeta() ?? $campaign->getAmountSpentEstimated() ?? 0, 'amount');
                $duration = $campaign->getCampaignDurationDays() ?? 'N/A';
                
                return [
                    substr($campaign->meta_campaign_name, 0, 30) . '...',
                    $campaign->campaign_status ?? 'N/A',
                    $realStatus,
                    '$' . number_format($dailyBudget, 2),
                    '$' . number_format($actualSpent, 2),
                    $duration . ' d√≠as'
                ];
            })
        );
    }
    
    private function displayResults(array $results)
    {
        $this->line('');
        $this->info('üìà Resultados del procesamiento microsc√≥pico:');
        
        // Mostrar resumen general
        if (isset($results['summary'])) {
            $summary = $results['summary'];
            $this->info("üìä Resumen General:");
            $this->line("   ‚Ä¢ Total procesadas: {$summary['total_campaigns_processed']}");
            $this->line("   ‚Ä¢ Total conciliadas: {$summary['total_campaigns_reconciled']}");
            $this->line("   ‚Ä¢ Total errores: {$summary['total_errors']}");
            $this->line("   ‚Ä¢ Tasa de √©xito: " . number_format($summary['success_rate'], 2) . "%");
            
            $this->line('');
            $this->info("üìã Desglose por estado:");
            foreach ($summary['status_breakdown'] as $status => $count) {
                $emoji = match($status) {
                    'active' => 'üü¢',
                    'paused' => 'üî¥',
                    'scheduled' => 'üîµ',
                    'completed' => '‚úÖ',
                    default => '‚ùì'
                };
                $this->line("   {$emoji} {$status}: {$count} campa√±as");
            }
        }
        
        // Mostrar detalles por estado
        foreach (['active', 'paused', 'scheduled', 'completed'] as $status) {
            if (isset($results[$status]) && $results[$status]['processed'] > 0) {
                $this->line('');
                $emoji = match($status) {
                    'active' => 'üü¢',
                    'paused' => 'üî¥',
                    'scheduled' => 'üîµ',
                    'completed' => '‚úÖ',
                    default => '‚ùì'
                };
                
                $this->info("{$emoji} Estado: " . strtoupper($status));
                $this->line("   ‚Ä¢ Procesadas: {$results[$status]['processed']}");
                $this->line("   ‚Ä¢ Conciliadas: {$results[$status]['reconciled']}");
                
                if (!empty($results[$status]['errors'])) {
                    $this->line("   ‚Ä¢ Errores: " . count($results[$status]['errors']));
                    foreach ($results[$status]['errors'] as $error) {
                        $this->error("     - {$error}");
                    }
                }
            }
        }
        
        // Mostrar recomendaciones
        $this->line('');
        $this->info('üí° Recomendaciones:');
        
        if (isset($results['paused']) && $results['paused']['processed'] > 0) {
            $this->line('   üî¥ Campa√±as PAUSADAS: Se registr√≥ solo el gasto real (sin conciliar plan completo)');
        }
        
        if (isset($results['scheduled']) && $results['scheduled']['processed'] > 0) {
            $this->line('   üîµ Campa√±as PROGRAMADAS: No se crearon conciliaciones (esperando activaci√≥n)');
        }
        
        if (isset($results['active']) && $results['active']['processed'] > 0) {
            $this->line('   üü¢ Campa√±as ACTIVAS: Conciliaci√≥n normal con plan completo');
        }
        
        if (isset($results['completed']) && $results['completed']['processed'] > 0) {
            $this->line('   ‚úÖ Campa√±as COMPLETADAS: Conciliaci√≥n final realizada');
        }
    }
}
